/*
 * This file is part of the ng-spring-data-rest project (https://github.com/dhoeppe/ng-spring-data-rest).
 * Copyright (c) 2020 Daniel HÃ¶ppe.
 *
 * ng-spring-data-rest is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 3.
 *
 * ng-spring-data-rest is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with ng-spring-data-rest.  If not, see https://github.com/dhoeppe/ng-spring-data-rest.
 */

#!/usr/bin/env node

'use strict';

function parseJSON(file) {
    return JSON.parse(fs.readFileSync(file, 'utf8'));
}

const path = require('path');
const fs = require('fs');
const ArgumentParser = require('argparse').ArgumentParser;
const pkg = parseJSON(path.join(__dirname, 'package.json'));

const argParser = new ArgumentParser({
    version: pkg.version,
    addHelp: true,
    description: 'Angular class and service generator for use with' +
        ' Spring Data REST and the ngx-hal-client. Generates classes' +
        ' based on the provided JSON schema and ALPS profiles.' +
        ' Allows simple modifications of the generated files.'
});
argParser.addArgument(
    ['-b', '--base-url'],
    {
        help: 'The base URL to the Spring Data REST server.',
        dest: 'baseURL',
        metavar: 'BASEURL',
        required: true
    });
argParser.addArgument(
    ['-u', '--user'],
    {
        help: 'The username to be used when authenticating with the Spring Data REST server.',
        dest: 'username',
        metavar: 'USERNAME'
    });
argParser.addArgument(
    ['-p', '--password'],
    {
        help: 'The password to be used when authenticating with the Spring Data REST server.',
        dest: 'password',
        metavar: 'PASSWORD'
    });
argParser.addArgument(
    ['-a', '--auth'],
    {
        help: 'The authentication method to use.\n' +
            'When using COOKIE the body to the authentication endpoint contains' +
            ' the properties \'username\' and \'password\' with the specified credentials.',
        dest: 'authMethod',
        metavar: 'AUTHMETHOD',
        required: true,
        choices: ['NONE', 'COOKIE']
    });
argParser.addArgument(
    ['-A', '--auth-endpoint'],
    {
        help: 'The authentication endpoint to use.',
        dest: 'authEndpoint',
        metavar: 'AUTHENDPOINT'
    });
// TODO add optional config file for modifying input to the json-schema-to-typescript converter
const args = argParser.parseArgs();

if (args.authMethod !== 'NONE' && (!args.username || !args.password)) {
    console.error('Authentication method is specified, but either username or password is not provided.');
    process.exit(1);
}

// Load generator script and apply it on the args.
const ngSpringDataRest = require('./ng-spring-data-rest.js');
ngSpringDataRest(args);
